{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/fifo.js"],"sourcesContent":["// algorithms/fifo.js\n\nexport function fifo(processes) {\n    let time = 0; // Initialize the current time \n    let totalWaitTime = 0; // Initialize the total wait \n    let totalTurnAroundTime = 0; // Initialize the total turnaround\n  \n    \n    const result = [];\n  \n   \n    for (let i = 0; i < processes.length; i++) {\n      const process = processes[i]; \n  \n      const waitTime = time; \n      const turnAroundTime = time + process.burstTime; // Turnaround time is wait time + burst time\n  \n  \n      totalWaitTime += waitTime;\n      totalTurnAroundTime += turnAroundTime;\n  \n      // Update the current time by adding the burst time of the current process\n      time += process.burstTime;\n  \n      // Add the process details to the result array\n      result.push({\n        ...process, \n        waitTime: waitTime, \n        turnAroundTime: turnAroundTime \n      });\n    }\n  \n    // Calculate the average wait time and average turnaround time\n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    // Return the results including the detailed process info and averages\n    return {\n      result, \n      avgWaitTime, \n      avgTurnAroundTime \n    };\n  }"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAEd,SAAS,KAAK,SAAS;IAC1B,IAAI,OAAO,GAAG,+BAA+B;IAC7C,IAAI,gBAAgB,GAAG,6BAA6B;IACpD,IAAI,sBAAsB,GAAG,kCAAkC;IAG/D,MAAM,SAAS,EAAE;IAGjB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACzC,MAAM,UAAU,SAAS,CAAC,EAAE;QAE5B,MAAM,WAAW;QACjB,MAAM,iBAAiB,OAAO,QAAQ,SAAS,EAAE,4CAA4C;QAG7F,iBAAiB;QACjB,uBAAuB;QAEvB,0EAA0E;QAC1E,QAAQ,QAAQ,SAAS;QAEzB,8CAA8C;QAC9C,OAAO,IAAI,CAAC;YACV,GAAG,OAAO;YACV,UAAU;YACV,gBAAgB;QAClB;IACF;IAEA,8DAA8D;IAC9D,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,sEAAsE;IACtE,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/sjf.js"],"sourcesContent":["// algorithms/sjf.js\n\nexport function sjf(processes) {\n    // Sort processes by burst time \n    processes.sort((a, b) => a.burstTime - b.burstTime);\n  \n    let time = 0; //  current time to 0\n    let totalWaitTime = 0; // Iwait time to 0\n    let totalTurnAroundTime = 0; // turnaround time to 0\n  \n    // Calculate wait time and turnaround time \n    const result = processes.map((process) => {\n      const wait = time; // \n      const turnAround = time + process.burstTime; \n  \n    \n      totalWaitTime += wait;\n      totalTurnAroundTime += turnAround;\n  \n      time += process.burstTime;\n  \n      // Return the process with its wait time and turnaround time\n      return {\n        ...process,\n        waitTime: wait, \n        turnAroundTime: turnAround, \n      };\n    });\n  \n    // Calculate average wait time and turnaround time\n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    // Step 4: Return the results\n    return {\n      result, \n      avgWaitTime, \n      avgTurnAroundTime, \n    };\n  }"],"names":[],"mappings":"AAAA,oBAAoB;;;;AAEb,SAAS,IAAI,SAAS;IACzB,gCAAgC;IAChC,UAAU,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,SAAS,GAAG,EAAE,SAAS;IAElD,IAAI,OAAO,GAAG,qBAAqB;IACnC,IAAI,gBAAgB,GAAG,kBAAkB;IACzC,IAAI,sBAAsB,GAAG,uBAAuB;IAEpD,2CAA2C;IAC3C,MAAM,SAAS,UAAU,GAAG,CAAC,CAAC;QAC5B,MAAM,OAAO,MAAM,GAAG;QACtB,MAAM,aAAa,OAAO,QAAQ,SAAS;QAG3C,iBAAiB;QACjB,uBAAuB;QAEvB,QAAQ,QAAQ,SAAS;QAEzB,4DAA4D;QAC5D,OAAO;YACL,GAAG,OAAO;YACV,UAAU;YACV,gBAAgB;QAClB;IACF;IAEA,kDAAkD;IAClD,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,6BAA6B;IAC7B,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/stcf.js"],"sourcesContent":["export function stcf(processes) {\n    let time = 0;\n    let completed = 0;\n    let remainingProcesses = processes.map(p => ({ ...p, remainingTime: p.burstTime }));\n    let result = [];\n  \n    while (completed < processes.length) {\n      let shortestProcess = remainingProcesses\n        .filter(p => p.arrivalTime <= time && p.remainingTime > 0)\n        .sort((a, b) => a.remainingTime - b.remainingTime)[0];\n  \n      if (shortestProcess) {\n        shortestProcess.remainingTime--;\n        result.push({ process: shortestProcess.id, time });\n  \n        if (shortestProcess.remainingTime === 0) {\n          completed++;\n        }\n      }\n      time++;\n    }\n  \n    return result;\n  }\n  "],"names":[],"mappings":";;;AAAO,SAAS,KAAK,SAAS;IAC1B,IAAI,OAAO;IACX,IAAI,YAAY;IAChB,IAAI,qBAAqB,UAAU,GAAG,CAAC,CAAA,IAAK,CAAC;YAAE,GAAG,CAAC;YAAE,eAAe,EAAE,SAAS;QAAC,CAAC;IACjF,IAAI,SAAS,EAAE;IAEf,MAAO,YAAY,UAAU,MAAM,CAAE;QACnC,IAAI,kBAAkB,mBACnB,MAAM,CAAC,CAAA,IAAK,EAAE,WAAW,IAAI,QAAQ,EAAE,aAAa,GAAG,GACvD,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,aAAa,GAAG,EAAE,aAAa,CAAC,CAAC,EAAE;QAEvD,IAAI,iBAAiB;YACnB,gBAAgB,aAAa;YAC7B,OAAO,IAAI,CAAC;gBAAE,SAAS,gBAAgB,EAAE;gBAAE;YAAK;YAEhD,IAAI,gBAAgB,aAAa,KAAK,GAAG;gBACvC;YACF;QACF;QACA;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/components/Chart.js"],"sourcesContent":["// components/Chart.js\nimport { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js/auto';\n\nconst ChartComponent = ({ data }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      new Chart(chartRef.current, {\n        type: 'bar',\n        data: {\n          labels: data.labels,\n          datasets: [\n            {\n              label: 'Burst Time',\n              data: data.burstTimes,\n              backgroundColor: 'rgba(89, 134, 134, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n            },\n            {\n              label: 'Wait Time',\n              data: data.waitTimes,\n              backgroundColor: 'rgba(153, 102, 255, 0.2)',\n              borderColor: 'rgba(153, 102, 255, 1)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [data]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default ChartComponent;\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;AACA;;;;;;;;AAEA,MAAM,iBAAiB,CAAC,EAAE,IAAI,EAAE;IAC9B,MAAM,WAAW,CAAA,GAAA,mGAAA,CAAA,SAAM,AAAD,EAAE;IAExB,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,OAAO,EAAE;YACpB,IAAI,sIAAA,CAAA,QAAK,CAAC,SAAS,OAAO,EAAE;gBAC1B,MAAM;gBACN,MAAM;oBACJ,QAAQ,KAAK,MAAM;oBACnB,UAAU;wBACR;4BACE,OAAO;4BACP,MAAM,KAAK,UAAU;4BACrB,iBAAiB;4BACjB,aAAa;4BACb,aAAa;wBACf;wBACA;4BACE,OAAO;4BACP,MAAM,KAAK,SAAS;4BACpB,iBAAiB;4BACjB,aAAa;4BACb,aAAa;wBACf;qBACD;gBACH;gBACA,SAAS;oBACP,QAAQ;wBACN,GAAG;4BACD,aAAa;wBACf;oBACF;gBACF;YACF;QACF;IACF,GAAG;QAAC;KAAK;IAET,qBAAO,qKAAC;QAAO,KAAK;;;;;;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/components/Header.js"],"sourcesContent":["export default function Header() {\n    return (\n      <header style={{ background: \"#007BFF\", padding: \"10px\", color: \"white\", textAlign: \"center\" }}>\n        <h1>CPU Scheduling Simulator</h1>\n      </header>\n    );\n  }\n  "],"names":[],"mappings":";;;;;AAAe,SAAS;IACpB,qBACE,qKAAC;QAAO,OAAO;YAAE,YAAY;YAAW,SAAS;YAAQ,OAAO;YAAS,WAAW;QAAS;kBAC3F,cAAA,qKAAC;sBAAG;;;;;;;;;;;AAGV","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/pages/index.js"],"sourcesContent":["import { useState } from 'react';\nimport { fifo } from '../algorithms/fifo';\nimport { sjf } from '../algorithms/sjf';\nimport { stcf } from '../algorithms/stcf';  \nimport ChartComponent from '../components/Chart';\nimport Header from '../components/Header';\n\nexport default function Home() {\n  const [numProcesses, setNumProcesses] = useState(3);\n  const [processes, setProcesses] = useState([]);\n  const [algorithm, setAlgorithm] = useState('');\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false); \n\n  const generateProcesses = () => {\n    const generatedProcesses = [];\n    for (let i = 0; i < numProcesses; i++) {\n      generatedProcesses.push({\n        id: i + 1,\n        burstTime: Math.floor(Math.random() * 10) + 1,\n        arrivalTime: Math.floor(Math.random() * 10), \n      });\n    }\n    setProcesses(generatedProcesses);\n  };\n\n  const handleAlgorithmChange = (e) => {\n    setAlgorithm(e.target.value);\n  };\n\n  const handleRunAlgorithm = () => {\n    if (!algorithm || processes.length === 0) return;\n\n    setLoading(true); \n\n    setTimeout(() => { \n      let algoResult = null;\n\n      if (algorithm === 'FIFO') {\n        algoResult = fifo(processes);\n      } else if (algorithm === 'SJF') {\n        algoResult = sjf(processes);\n      } else if (algorithm === 'STCF') {\n        algoResult = stcf(processes); \n      }\n\n      setResult(algoResult);\n      setLoading(false); \n    }, 1000); \n  };  \n\n  return (\n    <div>\n      <Header />\n      <h1>CPU Scheduling Algorithms</h1>\n\n      <label>Number of Processes: </label>\n      <input\n        type=\"number\"\n        value={numProcesses}\n        onChange={(e) => setNumProcesses(parseInt(e.target.value))}\n      />\n      <button onClick={generateProcesses}>Generate Processes</button>\n\n      <label>Select Algorithm:</label>\n      <select value={algorithm} onChange={handleAlgorithmChange}>\n        <option value=\"\">Select Algorithm</option>\n        <option value=\"FIFO\">FIFO</option>\n        <option value=\"SJF\">SJF</option>\n        <option value=\"STCF\">STCF</option>\n      </select>\n\n      <button onClick={handleRunAlgorithm} disabled={loading}>\n        {loading ? 'Running...' : 'Run Algorithm'} {/* Show loading text */}\n      </button>\n\n      {loading && <p>Processing... Please wait.</p>} {/*  Show loading message */}\n\n      {result && (\n        <ChartComponent\n          data={{\n            labels: result.result.map((p) => `P${p.id}`),\n            burstTimes: result.result.map((p) => p.burstTime),\n          }}\n        />\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAEe,SAAS;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,oBAAoB;QACxB,MAAM,qBAAqB,EAAE;QAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,IAAK;YACrC,mBAAmB,IAAI,CAAC;gBACtB,IAAI,IAAI;gBACR,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM;gBAC5C,aAAa,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YAC1C;QACF;QACA,aAAa;IACf;IAEA,MAAM,wBAAwB,CAAC;QAC7B,aAAa,EAAE,MAAM,CAAC,KAAK;IAC7B;IAEA,MAAM,qBAAqB;QACzB,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;QAE1C,WAAW;QAEX,WAAW;YACT,IAAI,aAAa;YAEjB,IAAI,cAAc,QAAQ;gBACxB,aAAa,CAAA,GAAA,2GAAA,CAAA,OAAI,AAAD,EAAE;YACpB,OAAO,IAAI,cAAc,OAAO;gBAC9B,aAAa,CAAA,GAAA,0GAAA,CAAA,MAAG,AAAD,EAAE;YACnB,OAAO,IAAI,cAAc,QAAQ;gBAC/B,aAAa,CAAA,GAAA,2GAAA,CAAA,OAAI,AAAD,EAAE;YACpB;YAEA,UAAU;YACV,WAAW;QACb,GAAG;IACL;IAEA,qBACE,qKAAC;;0BACC,qKAAC,6GAAA,CAAA,UAAM;;;;;0BACP,qKAAC;0BAAG;;;;;;0BAEJ,qKAAC;0BAAM;;;;;;0BACP,qKAAC;gBACC,MAAK;gBACL,OAAO;gBACP,UAAU,CAAC,IAAM,gBAAgB,SAAS,EAAE,MAAM,CAAC,KAAK;;;;;;0BAE1D,qKAAC;gBAAO,SAAS;0BAAmB;;;;;;0BAEpC,qKAAC;0BAAM;;;;;;0BACP,qKAAC;gBAAO,OAAO;gBAAW,UAAU;;kCAClC,qKAAC;wBAAO,OAAM;kCAAG;;;;;;kCACjB,qKAAC;wBAAO,OAAM;kCAAO;;;;;;kCACrB,qKAAC;wBAAO,OAAM;kCAAM;;;;;;kCACpB,qKAAC;wBAAO,OAAM;kCAAO;;;;;;;;;;;;0BAGvB,qKAAC;gBAAO,SAAS;gBAAoB,UAAU;;oBAC5C,UAAU,eAAe;oBAAgB;;;;;;;YAG3C,yBAAW,qKAAC;0BAAE;;;;;;YAA+B;YAE7C,wBACC,qKAAC,4GAAA,CAAA,UAAc;gBACb,MAAM;oBACJ,QAAQ,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,IAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE;oBAC3C,YAAY,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,IAAM,EAAE,SAAS;gBAClD;;;;;;;;;;;;AAKV","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}