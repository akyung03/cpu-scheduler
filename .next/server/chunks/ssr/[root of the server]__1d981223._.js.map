{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/fifo.js"],"sourcesContent":["// algorithms/fifo.js\n\nexport function fifo(processes) {\n    let time = 0; // Initialize the current time \n    let totalWaitTime = 0; // Initialize the total wait \n    let totalTurnAroundTime = 0; // Initialize the total turnaround\n  \n    \n    const result = [];\n  \n   \n    for (let i = 0; i < processes.length; i++) {\n      const process = processes[i]; \n  \n      const waitTime = time; \n      const turnAroundTime = time + process.burstTime; // Turnaround time is wait time + burst time\n  \n  \n      totalWaitTime += waitTime;\n      totalTurnAroundTime += turnAroundTime;\n  \n      // Update the current time by adding the burst time of the current process\n      time += process.burstTime;\n  \n      // Add the process details to the result array\n      result.push({\n        ...process, \n        waitTime: waitTime, \n        turnAroundTime: turnAroundTime \n      });\n    }\n  \n    // Calculate the average wait time and average turnaround time\n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    // Return the results including the detailed process info and averages\n    return {\n      result, \n      avgWaitTime, \n      avgTurnAroundTime \n    };\n  }"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAEd,SAAS,KAAK,SAAS;IAC1B,IAAI,OAAO,GAAG,+BAA+B;IAC7C,IAAI,gBAAgB,GAAG,6BAA6B;IACpD,IAAI,sBAAsB,GAAG,kCAAkC;IAG/D,MAAM,SAAS,EAAE;IAGjB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAAK;QACzC,MAAM,UAAU,SAAS,CAAC,EAAE;QAE5B,MAAM,WAAW;QACjB,MAAM,iBAAiB,OAAO,QAAQ,SAAS,EAAE,4CAA4C;QAG7F,iBAAiB;QACjB,uBAAuB;QAEvB,0EAA0E;QAC1E,QAAQ,QAAQ,SAAS;QAEzB,8CAA8C;QAC9C,OAAO,IAAI,CAAC;YACV,GAAG,OAAO;YACV,UAAU;YACV,gBAAgB;QAClB;IACF;IAEA,8DAA8D;IAC9D,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,sEAAsE;IACtE,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/sjf.js"],"sourcesContent":["// algorithms/sjf.js\n\nexport function sjf(processes) {\n    // Sort processes by burst time \n    processes.sort((a, b) => a.burstTime - b.burstTime);\n  \n    let time = 0; //  current time to 0\n    let totalWaitTime = 0; // Iwait time to 0\n    let totalTurnAroundTime = 0; // turnaround time to 0\n  \n    // Calculate wait time and turnaround time \n    const result = processes.map((process) => {\n      const wait = time; // \n      const turnAround = time + process.burstTime; \n  \n    \n      totalWaitTime += wait;\n      totalTurnAroundTime += turnAround;\n  \n      time += process.burstTime;\n  \n      // Return the process with its wait time and turnaround time\n      return {\n        ...process,\n        waitTime: wait, \n        turnAroundTime: turnAround, \n      };\n    });\n  \n    // Calculate average wait time and turnaround time\n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    // Step 4: Return the results\n    return {\n      result, \n      avgWaitTime, \n      avgTurnAroundTime, \n    };\n  }"],"names":[],"mappings":"AAAA,oBAAoB;;;;AAEb,SAAS,IAAI,SAAS;IACzB,gCAAgC;IAChC,UAAU,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,SAAS,GAAG,EAAE,SAAS;IAElD,IAAI,OAAO,GAAG,qBAAqB;IACnC,IAAI,gBAAgB,GAAG,kBAAkB;IACzC,IAAI,sBAAsB,GAAG,uBAAuB;IAEpD,2CAA2C;IAC3C,MAAM,SAAS,UAAU,GAAG,CAAC,CAAC;QAC5B,MAAM,OAAO,MAAM,GAAG;QACtB,MAAM,aAAa,OAAO,QAAQ,SAAS;QAG3C,iBAAiB;QACjB,uBAAuB;QAEvB,QAAQ,QAAQ,SAAS;QAEzB,4DAA4D;QAC5D,OAAO;YACL,GAAG,OAAO;YACV,UAAU;YACV,gBAAgB;QAClB;IACF;IAEA,kDAAkD;IAClD,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,6BAA6B;IAC7B,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/stcf.js"],"sourcesContent":["// algorithms/stcf.js\n\nexport function stcf(processes) {\n  if (!processes || processes.length === 0) {\n    return {\n      result: [],\n      avgWaitTime: 0,\n      avgTurnAroundTime: 0,\n    };\n  }\n\n  let time = 0;\n  let totalWaitTime = 0;\n  let totalTurnAroundTime = 0;\n  const result = [];\n\n  \n  const processQueue = processes.map((process) => ({\n    ...process,\n    remainingTime: process.burstTime,\n    waitTime: 0,\n    completed: false,\n  }));\n\n  while (processQueue.some((p) => !p.completed)) {\n  \n    let shortestProcess = null;\n    for (const process of processQueue) {\n      if (\n        !process.completed &&\n        process.arrivalTime <= time &&\n        (!shortestProcess || process.remainingTime < shortestProcess.remainingTime)\n      ) {\n        shortestProcess = process;\n      }\n    }\n\n    if (!shortestProcess) {\n      time++;\n      continue;\n    }\n\n   \n    shortestProcess.remainingTime -= 1;\n    time += 1;\n\n    \n    processQueue.forEach((p) => {\n      if (p !== shortestProcess && !p.completed && p.arrivalTime <= time) {\n        p.waitTime += 1;\n      }\n    });\n\n\n    if (shortestProcess.remainingTime === 0) {\n      shortestProcess.completed = true;\n      const turnAroundTime = time - shortestProcess.arrivalTime;\n      totalWaitTime += shortestProcess.waitTime;\n      totalTurnAroundTime += turnAroundTime;\n\n      result.push({\n        ...shortestProcess,\n        waitTime: shortestProcess.waitTime,\n        turnAroundTime: turnAroundTime,\n      });\n    }\n  }\n\n \n  const avgWaitTime = totalWaitTime / processes.length;\n  const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n\n  return {\n    result,\n    avgWaitTime,\n    avgTurnAroundTime,\n  };\n}"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAEd,SAAS,KAAK,SAAS;IAC5B,IAAI,CAAC,aAAa,UAAU,MAAM,KAAK,GAAG;QACxC,OAAO;YACL,QAAQ,EAAE;YACV,aAAa;YACb,mBAAmB;QACrB;IACF;IAEA,IAAI,OAAO;IACX,IAAI,gBAAgB;IACpB,IAAI,sBAAsB;IAC1B,MAAM,SAAS,EAAE;IAGjB,MAAM,eAAe,UAAU,GAAG,CAAC,CAAC,UAAY,CAAC;YAC/C,GAAG,OAAO;YACV,eAAe,QAAQ,SAAS;YAChC,UAAU;YACV,WAAW;QACb,CAAC;IAED,MAAO,aAAa,IAAI,CAAC,CAAC,IAAM,CAAC,EAAE,SAAS,EAAG;QAE7C,IAAI,kBAAkB;QACtB,KAAK,MAAM,WAAW,aAAc;YAClC,IACE,CAAC,QAAQ,SAAS,IAClB,QAAQ,WAAW,IAAI,QACvB,CAAC,CAAC,mBAAmB,QAAQ,aAAa,GAAG,gBAAgB,aAAa,GAC1E;gBACA,kBAAkB;YACpB;QACF;QAEA,IAAI,CAAC,iBAAiB;YACpB;YACA;QACF;QAGA,gBAAgB,aAAa,IAAI;QACjC,QAAQ;QAGR,aAAa,OAAO,CAAC,CAAC;YACpB,IAAI,MAAM,mBAAmB,CAAC,EAAE,SAAS,IAAI,EAAE,WAAW,IAAI,MAAM;gBAClE,EAAE,QAAQ,IAAI;YAChB;QACF;QAGA,IAAI,gBAAgB,aAAa,KAAK,GAAG;YACvC,gBAAgB,SAAS,GAAG;YAC5B,MAAM,iBAAiB,OAAO,gBAAgB,WAAW;YACzD,iBAAiB,gBAAgB,QAAQ;YACzC,uBAAuB;YAEvB,OAAO,IAAI,CAAC;gBACV,GAAG,eAAe;gBAClB,UAAU,gBAAgB,QAAQ;gBAClC,gBAAgB;YAClB;QACF;IACF;IAGA,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/rr.js"],"sourcesContent":["// round robin algo\n\nexport function rr(processes, timeQuantum) {\n    let time = 0;\n    let totalWaitTime = 0;\n    let totalTurnAroundTime = 0;\n    const result = [];\n  \n    // Create a copy of processes to avoid mutating the original array\n    const queue = processes.map((process) => ({\n      ...process,\n      remainingTime: process.burstTime, \n    }));\n  \n    while (queue.length > 0) {\n      const process = queue.shift(); \n  \n      const executionTime = Math.min(timeQuantum, process.remainingTime);\n      process.remainingTime -= executionTime;\n  \n      queue.forEach((p) => {\n        if (p !== process) {\n          p.waitTime = (p.waitTime || 0) + executionTime;\n        }\n      });\n  \n      if (process.remainingTime > 0) {\n        queue.push(process);\n      } else {\n\n        const turnAroundTime = time + executionTime;\n        totalWaitTime += process.waitTime || 0;\n        totalTurnAroundTime += turnAroundTime;\n  \n        result.push({\n          ...process,\n          waitTime: process.waitTime || 0,\n          turnAroundTime: turnAroundTime,\n        });\n      }\n  \n      time += executionTime;\n    }\n  \n\n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    return {\n      result,\n      avgWaitTime,\n      avgTurnAroundTime,\n    };\n  }"],"names":[],"mappings":"AAAA,mBAAmB;;;;AAEZ,SAAS,GAAG,SAAS,EAAE,WAAW;IACrC,IAAI,OAAO;IACX,IAAI,gBAAgB;IACpB,IAAI,sBAAsB;IAC1B,MAAM,SAAS,EAAE;IAEjB,kEAAkE;IAClE,MAAM,QAAQ,UAAU,GAAG,CAAC,CAAC,UAAY,CAAC;YACxC,GAAG,OAAO;YACV,eAAe,QAAQ,SAAS;QAClC,CAAC;IAED,MAAO,MAAM,MAAM,GAAG,EAAG;QACvB,MAAM,UAAU,MAAM,KAAK;QAE3B,MAAM,gBAAgB,KAAK,GAAG,CAAC,aAAa,QAAQ,aAAa;QACjE,QAAQ,aAAa,IAAI;QAEzB,MAAM,OAAO,CAAC,CAAC;YACb,IAAI,MAAM,SAAS;gBACjB,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ,IAAI,CAAC,IAAI;YACnC;QACF;QAEA,IAAI,QAAQ,aAAa,GAAG,GAAG;YAC7B,MAAM,IAAI,CAAC;QACb,OAAO;YAEL,MAAM,iBAAiB,OAAO;YAC9B,iBAAiB,QAAQ,QAAQ,IAAI;YACrC,uBAAuB;YAEvB,OAAO,IAAI,CAAC;gBACV,GAAG,OAAO;gBACV,UAAU,QAAQ,QAAQ,IAAI;gBAC9B,gBAAgB;YAClB;QACF;QAEA,QAAQ;IACV;IAGA,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/algorithms/mlfq.js"],"sourcesContent":["// mlfq algo\n\nexport function mlfq(processes, queues = 3, timeQuanta = [4, 8, Infinity]) {\n    let time = 0;\n    let totalWaitTime = 0;\n    let totalTurnAroundTime = 0;\n    const result = [];\n  \n    // Create queues with different time quanta\n    const queuesArray = Array.from({ length: queues }, (_, i) => ({\n      timeQuantum: timeQuanta[i],\n      processes: [],\n    }));\n  \n    // Add all processes to the first queue initially\n    queuesArray[0].processes = processes.map((process) => ({\n      ...process,\n      remainingTime: process.burstTime,\n      queueLevel: 0,\n    }));\n  \n    while (queuesArray.some((q) => q.processes.length > 0)) {\n      for (let i = 0; i < queuesArray.length; i++) {\n        const queue = queuesArray[i];\n        if (queue.processes.length > 0) {\n          const process = queue.processes.shift(); \n  \n          const executionTime = Math.min(queue.timeQuantum, process.remainingTime);\n          process.remainingTime -= executionTime;\n  \n          queuesArray.forEach((q) => {\n            q.processes.forEach((p) => {\n              if (p !== process) {\n                p.waitTime = (p.waitTime || 0) + executionTime;\n              }\n            });\n          });\n  \n          if (process.remainingTime > 0 && i < queuesArray.length - 1) {\n            process.queueLevel += 1;\n            queuesArray[i + 1].processes.push(process);\n          } else if (process.remainingTime === 0) {\n\n            const turnAroundTime = time + executionTime;\n            totalWaitTime += process.waitTime || 0;\n            totalTurnAroundTime += turnAroundTime;\n  \n            result.push({\n              ...process,\n              waitTime: process.waitTime || 0,\n              turnAroundTime: turnAroundTime,\n            });\n          }\n  \n          time += executionTime;\n          break; \n        }\n      }\n    }\n  \n  \n    const avgWaitTime = totalWaitTime / processes.length;\n    const avgTurnAroundTime = totalTurnAroundTime / processes.length;\n  \n    return {\n      result,\n      avgWaitTime,\n      avgTurnAroundTime,\n    };\n  }"],"names":[],"mappings":"AAAA,YAAY;;;;AAEL,SAAS,KAAK,SAAS,EAAE,SAAS,CAAC,EAAE,aAAa;IAAC;IAAG;IAAG;CAAS;IACrE,IAAI,OAAO;IACX,IAAI,gBAAgB;IACpB,IAAI,sBAAsB;IAC1B,MAAM,SAAS,EAAE;IAEjB,2CAA2C;IAC3C,MAAM,cAAc,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAO,GAAG,CAAC,GAAG,IAAM,CAAC;YAC5D,aAAa,UAAU,CAAC,EAAE;YAC1B,WAAW,EAAE;QACf,CAAC;IAED,iDAAiD;IACjD,WAAW,CAAC,EAAE,CAAC,SAAS,GAAG,UAAU,GAAG,CAAC,CAAC,UAAY,CAAC;YACrD,GAAG,OAAO;YACV,eAAe,QAAQ,SAAS;YAChC,YAAY;QACd,CAAC;IAED,MAAO,YAAY,IAAI,CAAC,CAAC,IAAM,EAAE,SAAS,CAAC,MAAM,GAAG,GAAI;QACtD,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,MAAM,EAAE,IAAK;YAC3C,MAAM,QAAQ,WAAW,CAAC,EAAE;YAC5B,IAAI,MAAM,SAAS,CAAC,MAAM,GAAG,GAAG;gBAC9B,MAAM,UAAU,MAAM,SAAS,CAAC,KAAK;gBAErC,MAAM,gBAAgB,KAAK,GAAG,CAAC,MAAM,WAAW,EAAE,QAAQ,aAAa;gBACvE,QAAQ,aAAa,IAAI;gBAEzB,YAAY,OAAO,CAAC,CAAC;oBACnB,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;wBACnB,IAAI,MAAM,SAAS;4BACjB,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ,IAAI,CAAC,IAAI;wBACnC;oBACF;gBACF;gBAEA,IAAI,QAAQ,aAAa,GAAG,KAAK,IAAI,YAAY,MAAM,GAAG,GAAG;oBAC3D,QAAQ,UAAU,IAAI;oBACtB,WAAW,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBACpC,OAAO,IAAI,QAAQ,aAAa,KAAK,GAAG;oBAEtC,MAAM,iBAAiB,OAAO;oBAC9B,iBAAiB,QAAQ,QAAQ,IAAI;oBACrC,uBAAuB;oBAEvB,OAAO,IAAI,CAAC;wBACV,GAAG,OAAO;wBACV,UAAU,QAAQ,QAAQ,IAAI;wBAC9B,gBAAgB;oBAClB;gBACF;gBAEA,QAAQ;gBACR;YACF;QACF;IACF;IAGA,MAAM,cAAc,gBAAgB,UAAU,MAAM;IACpD,MAAM,oBAAoB,sBAAsB,UAAU,MAAM;IAEhE,OAAO;QACL;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/components/Chart.js"],"sourcesContent":["// components/Chart.js\nimport { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js/auto';\n\nconst ChartComponent = ({ data }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      new Chart(chartRef.current, {\n        type: 'bar',\n        data: {\n          labels: data.labels,\n          datasets: [\n            {\n              label: 'Burst Time',\n              data: data.burstTimes,\n              backgroundColor: 'rgba(89, 134, 134, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n            },\n            {\n              label: 'Wait Time',\n              data: data.waitTimes,\n              backgroundColor: 'rgba(153, 102, 255, 0.2)',\n              borderColor: 'rgba(153, 102, 255, 1)',\n              borderWidth: 1\n            }\n          ]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [data]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default ChartComponent;\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;AACA;;;;;;;;AAEA,MAAM,iBAAiB,CAAC,EAAE,IAAI,EAAE;IAC9B,MAAM,WAAW,CAAA,GAAA,mGAAA,CAAA,SAAM,AAAD,EAAE;IAExB,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,OAAO,EAAE;YACpB,IAAI,sIAAA,CAAA,QAAK,CAAC,SAAS,OAAO,EAAE;gBAC1B,MAAM;gBACN,MAAM;oBACJ,QAAQ,KAAK,MAAM;oBACnB,UAAU;wBACR;4BACE,OAAO;4BACP,MAAM,KAAK,UAAU;4BACrB,iBAAiB;4BACjB,aAAa;4BACb,aAAa;wBACf;wBACA;4BACE,OAAO;4BACP,MAAM,KAAK,SAAS;4BACpB,iBAAiB;4BACjB,aAAa;4BACb,aAAa;wBACf;qBACD;gBACH;gBACA,SAAS;oBACP,QAAQ;wBACN,GAAG;4BACD,aAAa;wBACf;oBACF;gBACF;YACF;QACF;IACF,GAAG;QAAC;KAAK;IAET,qBAAO,qKAAC;QAAO,KAAK;;;;;;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/components/Header.js"],"sourcesContent":["export default function Header() {\n    return (\n      <header style={{ background: \"\t#000000\", padding: \"10px\", color: \"white\", textAlign: \"center\" }}>\n        <h1>CPU Scheduling Simulator</h1>\n      </header>\n    );\n  }\n  "],"names":[],"mappings":";;;;;AAAe,SAAS;IACpB,qBACE,qKAAC;QAAO,OAAO;YAAE,YAAY;YAAY,SAAS;YAAQ,OAAO;YAAS,WAAW;QAAS;kBAC5F,cAAA,qKAAC;sBAAG;;;;;;;;;;;AAGV","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///Users/austincho/cpu-scheduler/pages/index.js"],"sourcesContent":["import { useState } from 'react';\nimport { fifo } from '../algorithms/fifo';\nimport { sjf } from '../algorithms/sjf';\nimport { stcf } from '../algorithms/stcf';\nimport { rr } from '../algorithms/rr';\nimport { mlfq } from '../algorithms/mlfq';\nimport ChartComponent from '../components/Chart';\nimport Header from '../components/Header';\nimport jsPDF from 'jspdf';\n\nexport default function Home() {\n  const [numProcesses, setNumProcesses] = useState(3);\n  const [timeQuantum, setTimeQuantum] = useState(2);\n  const [processes, setProcesses] = useState([]);\n  const [selectedAlgorithms, setSelectedAlgorithms] = useState([]);\n  const [results, setResults] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const generateProcesses = () => {\n    const generatedProcesses = [];\n    for (let i = 0; i < numProcesses; i++) {\n      generatedProcesses.push({\n        id: i + 1,\n        burstTime: Math.floor(Math.random() * 10) + 1,\n        arrivalTime: Math.floor(Math.random() * 10),\n      });\n    }\n    setProcesses(generatedProcesses);\n    setResults({});\n  };\n\n  const handleAlgorithmChange = (e) => {\n    const algorithm = e.target.value;\n    if (selectedAlgorithms.includes(algorithm)) {\n      setSelectedAlgorithms(selectedAlgorithms.filter((algo) => algo !== algorithm));\n    } else {\n      setSelectedAlgorithms([...selectedAlgorithms, algorithm]);\n    }\n  };\n\n  const runAlgorithms = () => {\n    if (selectedAlgorithms.length === 0 || processes.length === 0) return;\n\n    setLoading(true);\n\n    setTimeout(() => {\n      const newResults = {};\n\n      selectedAlgorithms.forEach((algorithm) => {\n        switch (algorithm) {\n          case 'FIFO':\n            newResults.FIFO = fifo(processes);\n            break;\n          case 'SJF':\n            newResults.SJF = sjf(processes);\n            break;\n          case 'STCF':\n            newResults.STCF = stcf(processes);\n            break;\n          case 'RR':\n            newResults.RR = rr(processes, timeQuantum);\n            break;\n          case 'MLFQ':\n            newResults.MLFQ = mlfq(processes);\n            break;\n          default:\n            break;\n        }\n      });\n\n      setResults(newResults);\n      setLoading(false);\n    }, 1000);\n  };\n\n  const resetSimulation = () => {\n    setNumProcesses(3);\n    setTimeQuantum(2);\n    setProcesses([]);\n    setSelectedAlgorithms([]);\n    setResults({});\n  };\n\n  const downloadPDF = () => {\n    const doc = new jsPDF();\n    let yOffset = 7;\n\n    Object.entries(results).forEach(([algorithm, result]) => {\n      doc.text(`Algorithm: ${algorithm}`, 7, yOffset);\n      yOffset += 7;\n      doc.text(`Average Wait Time: ${result.avgWaitTime?.toFixed(2) ?? 'N/A'}`, 7 , yOffset);\n      yOffset += 7;\n      doc.text(`Average Turnaround Time: ${result.avgTurnAroundTime?.toFixed(2) ?? 'N/A'}`, 7, yOffset);\n      yOffset += 7;\n\n      result.result.forEach((process) => {\n        doc.text(`Process ${process.id}: Burst Time - ${process.burstTime}, Wait Time - ${process.waitTime}, Turnaround Time - ${process.turnAroundTime}`, 10, yOffset);\n        yOffset += 7;\n      });\n\n      yOffset += 7;\n    });\n\n    doc.save('scheduling_results.pdf');\n  };\n\n  return (\n    <div>\n      <Header />\n      <h1>CPU Scheduling Algorithms</h1>\n\n      <p>1. Enter the number of processes and click <strong>Generate Processes</strong>.</p>\n      <p>2. Select the algorithms you want to run.</p>\n      <p>3. Click <strong>Run Selected Algorithms</strong> to see the results.</p>\n      <p>4. After running, click <strong>Reset Simulation</strong> to start a new simulation.</p>\n\n      <label>Number of Processes: </label>\n      <input\n        type=\"number\"\n        value={numProcesses}\n        onChange={(e) => setNumProcesses(parseInt(e.target.value))}\n      />\n      <button onClick={generateProcesses}>Generate Processes</button>\n\n      {selectedAlgorithms.includes('RR') && (\n        <div>\n          <label>Time Quantum (for RR): </label>\n          <input\n            type=\"number\"\n            value={timeQuantum}\n            onChange={(e) => setTimeQuantum(parseInt(e.target.value))}\n          />\n        </div>\n      )}\n\n      <div>\n        <label>Select Algorithms:</label>\n        {['FIFO', 'SJF', 'STCF', 'RR', 'MLFQ'].map((algorithm) => (\n          <div key={algorithm}>\n            <input\n              type=\"checkbox\"\n              value={algorithm}\n              checked={selectedAlgorithms.includes(algorithm)}\n              onChange={handleAlgorithmChange}\n            />\n            {algorithm}\n          </div>\n        ))}\n      </div>\n\n      <button onClick={runAlgorithms} disabled={loading || processes.length === 0}>\n        {loading ? 'Running...' : 'Run Selected Algorithms'}\n      </button>\n\n      <button onClick={resetSimulation} style={{ marginLeft: '10px', backgroundColor: 'red', color: 'white' }}>\n        Reset Simulation\n      </button>\n\n      <button onClick={downloadPDF} style={{ marginLeft: '10px', backgroundColor: 'green', color: 'white' }}>\n        Download Results as PDF\n      </button>\n\n      {loading && <p>Processing... Please wait.</p>}\n\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        {Object.entries(results).map(([algorithm, result]) => (\n          <div key={algorithm} style={{ margin: '10px', padding: '10px', border: '1px solid #ccc' }}>\n            <h2>{algorithm}</h2>\n            <p>Average Wait Time: {result.avgWaitTime?.toFixed(2) ?? 'N/A'}</p>\n            <p>Average Turnaround Time: {result.avgTurnAroundTime?.toFixed(2) ?? 'N/A'}</p>\n\n            <ChartComponent\n              data={{\n                labels: result.result.map((p) => `P${p.id}`),\n                burstTimes: result.result.map((p) => p.burstTime),\n                waitTimes: result.result.map((p) => p.waitTime),\n                turnaroundTimes: result.result.map((p) => p.turnAroundTime),\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}